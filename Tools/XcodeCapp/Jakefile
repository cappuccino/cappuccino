
require("../../common.jake");

var OS                =  require("os"),
    task              =  require("jake").task,
    stream            =  require("narwhal/term").stream,
    applicationName   =  "XcodeCapp.app";


function xcodebuild(mode, dstRoot, installPath)
{
    /*
     `xcodebuild` is invoked (with mode and optional parameters)
     to build Xcode projects from the command line.
    
     For our purposes, the mode parameter is  one of 'build', 'install' or 'clean'.
     The destination for build and install artificats is governed
     by the DSTROOT and INSTALL_PATH properties of the Xcode project (set for each target or scheme);
     They can optionally be appended to the `xcodebuild` invocation to override
     the project values for that invocation.
     NOTE: DEPLOYMENT_LOCATION must be set to 'Yes' in the Xcode project settings for overrides to work.
    
     We use the builder pattern to assemble an invocation for each of the modes we use.
     If dstRoot and/or installPath are null,
     do not include those parameters in the command invocation.
     If not included, defaults found in the Xcode project's settings will be used.
     Parameters dstRoot and installPath must be non-empty strings or null.
    */
    
    if (mode !== null)
    {
        mode = mode.toLowerCase();
    }
    else
    {
        colorPrint("Options for mode are 'build'||'install'||'clean'. Skipping", 'orange');
        OS.exit(0);  
    }
    
    if (mode == "clean")
    {
        dstRoot     =  null;
        installPath =  null;
    }

    // If sw_vers does not exist, we aren't on Mac OS X
    if (!executableExists("sw_vers"))
        OS.exit(0);

    /*
     Minimum platform requirement is macOS 10.13
     Note that internal platform numbering scheme changed after macOS 10.15
     High Sierra selected as support cut-off because it is apparently the oldest for which GitHub Actions are available.
     Used hardware supporting High Sierra is quite inexpensive - this may help some developers with hardware acquisition.
    */
    try
    {
        var p = OS.popen(["sw_vers", "-productVersion"]);

        if (p.wait() === 0)
        {
            var versions     =  p.stdout.read().split("."),
                majorVersion =  parseInt(versions[0], 10),
                minorVersion =  parseInt(versions[1], 10),
                buildVersion =  parseInt(versions[2], 10);

        if (!((majorVersion >= 11) || (majorVersion == 10 && minorVersion >= 13)))
            {
                colorPrint("XcodeCapp requires at least macOS Sierra.", "red");

                p.stdin.close();
                p.stdout.close();
                p.stderr.close();
                OS.exit(0);
            }
        }
    }
    finally
    {
        p.stdin.close();
        p.stdout.close();
        p.stderr.close();
    }

    if (executableExists("xcodebuild"))
    {
        var commandInvocation = "xcodebuild -target XcodeCapp " + mode;
        if (dstRoot !== null)
        {
            commandInvocation += " DSTROOT=" + dstRoot;
        }
        if (installPath !== null)
        {
            commandInvocation += " INSTALL_PATH=" + installPath;
        }
        if (OS.system(commandInvocation))
        {
            colorPrint("Unable to " + mode + " XcodeCapp. Skipping", "orange");
        }
    }
    else
    {
        var capitalizedModeDescription = mode.replace(/^\w/, (firstCharacter) => firstCharacter.toUpperCase());
        print(capitalizedModeDescription + "ing " + applicationName + " requires Xcode.");
    }
};

/*
 TODO: Fully separate build and install phases at Cappuccino project level.
 This would improve the ability to automate testing of all subprojects within the main project.
 Currently, the top-level Cappuccino Jakefile is structured in a way
 that seems conceptually at odds with doing this.
 It appears necessary to either add no-ops for `install` at the subproject Jakefile level
 or to re-imagine the way subprojects are included in the Jakefile hierarchy.
 Until automated testing and integration into the C.I. pipeline of the Tools subprojects
 becomes a reality, the separation of phases is left incomplete.
*/ 

task ("build", function() {
    /*
     See notes above.
     When `build` phase is fully separated from `install` useâ€¦
    xcodebuild("build", null, null);
    */
    
    // Same as install, for now.
    xcodebuild("install", "$HOME", "Applications"); 
});

task ("install", function() {
    /*
     Install to the user's home directory.
     `xcodebuild` uses DSTROOT as the base path when installing build products,
     and appends INSTALL_PATH
     `xcodebuild` recognizes and expands the POSIX $HOME setting automatically.
    */
    xcodebuild("install", "$HOME", "Applications");   
});

task ("clean", xcodebuild("clean", null, null));

task ("clobber", xcodebuild("clean", null, null));

task ("default", ["build"]);
