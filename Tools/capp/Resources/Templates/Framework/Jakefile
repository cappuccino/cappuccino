/*
 * Jakefile
 * __project.name__
 *
 * Created by __user.name__ on __project.date__.
 *
 * Copyright __project.year__, __organization.name__. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

//===========================================================
//  DO NOT REMOVE
//===========================================================

const env = process.env;
const path = require("path");

//===========================================================
//  USER CONFIGURABLE VARIABLES
//===========================================================

/*
    The directory in which the project will be built. By default
    it is built in $CAPP_BUILD if that is defined, otherwise
    in a "Build" directory within the project directory.
*/

const buildDir = path.resolve(env["BUILD_PATH"] || env["CAPP_BUILD"] || "Build");

/*
    The list of directories containing Objective-J source
    that should be compiled by jake. The main framework
    directory is always checked for Objective-J source,
    you only need to edit this if you have source in
    subdirectories. Do NOT include a leading ortrailing slash
    in the directory name.

    Example:

    const sourceDirs = [
            "Core",
            "Modules",
            "Modules/Foo",
            "Modules/Bar"
        ];
*/

const sourceDirs = [
    ];

/*
    The path to where to install the framework
*/

const packageFrameworksPath = path.join("~", "Developer", "Frameworks");

//===========================================================
//  AUTOMATICALLY GENERATED
//
//  Do not edit! (unless you know what you are doing)
//===========================================================

const fs = require("fs");
const childProcess = require("child_process");

const stream = ObjectiveJ.term.stream;
const utilsFile = ObjectiveJ.utils.file;
const jake = JAKE;

const CLEAN = JAKE.CLEAN_AND_CLOBBER.CLEAN;
const CLOBBER = JAKE.CLEAN_AND_CLOBBER.CLOBBER;

const FileList = jake.FileList;
const filedir = jake.filedir;
const task = jake.task;

const framework = CAPPUCCINO.Jake.frameworktask.framework;

const configuration = env["CONFIG"] || env["CONFIGURATION"] || env["c"] || "Debug";
const productName = "__project.nameasidentifier__";

const buildPath = path.join(buildDir, productName + ".build");
const debugPackagePath = path.join(packageFrameworksPath, "Debug", productName);
const releasePackagePath = path.join(packageFrameworksPath, productName);

const frameworkTask = framework (productName, function(frameworkTask)
{
    frameworkTask.setBuildIntermediatesPath(path.join(buildPath, configuration));
    frameworkTask.setBuildPath(path.join(buildDir, configuration));

    frameworkTask.setProductName(productName);
    frameworkTask.setIdentifier("__project.identifier__");
    frameworkTask.setVersion("1.0");
    frameworkTask.setAuthor("__organization.name__");
    frameworkTask.setEmail("__organization.email__");
    frameworkTask.setSummary("__project.name__");

    var includes = sourceDirs.map(function(dir) { 
        return dir + "/*.j"; 
    });

    const fileList = new FileList();

    includes.unshift("*.j");
    fileList.include(includes);
    frameworkTask.setSources(fileList);
    frameworkTask.setResources(new FileList("Resources/**/*"));
    frameworkTask.setFlattensSources(true);
    frameworkTask.setInfoPlistPath("Info.plist");
    frameworkTask.setLicense(BundleTask.License.LGPL_v2_1);

    if (configuration === "Debug") {
        frameworkTask.setCompilerFlags("-DDEBUG -g -S --inline-msg-send");
    } else {
        frameworkTask.setCompilerFlags("-O2");
    }
});

task("test", function()
{
    var tests = new FileList('Tests/*Test.j');
    var cmd = ["ojtest"].concat(tests.items());
    var cmdString = cmd.map(utilsFile.enquote).join(" ");

    childProcess.execSync(cmdString);
});

task ("debug", function()
{
    env["CONFIGURATION"] = "Debug";
    jake.subjake(["."], "build", env);
});

task ("release", function()
{
    env["CONFIGURATION"] = "Release";
    jake.subjake(["."], "build", env);
});

task ("default", ["release"]);

const frameworkCJS = path.join(buildDir, configuration, "CommonJS", "cappuccino", "Frameworks", productName);

filedir (frameworkCJS, [productName], function()
{
    if (fs.existsSync(frameworkCJS))
        fs.rmSync(frameworkCJS, { recursive: true });

    utilsFile.cp_r(frameworkTask.buildProductPath(), frameworkCJS);
});

task ("build", [productName, frameworkCJS]);

task ("all", ["debug", "release"]);

task ("install", ["debug", "release"], function()
{
    install("copy");
});

task ("install-symlinks", ["debug", "release"], function()
{
    install("symlink");
});

task ("help", function()
{
    const app = jake.application().name();

    colorPrint("--------------------------------------------------------------------------", "bold+green");
    colorPrint("__project.name__ - Framework", "bold+green");
    colorPrint("--------------------------------------------------------------------------", "bold+green");

    describeTask(app, "debug", "Builds a debug version at " + path.join(buildDir, "Debug", productName));
    describeTask(app, "release", "Builds a release version at " + path.join(buildDir, "Release", productName));
    describeTask(app, "all", "Builds a debug and release version");
    describeTask(app, "install", "Builds a debug and release version, then installs in " + packageFrameworksPath);
    describeTask(app, "install-symlinks", "Builds a debug and release version, then symlinks the built versions into " + packageFrameworksPath);
    describeTask(app, "clean", "Removes the intermediate build files");
    describeTask(app, "clobber", "Removes the intermediate build files and the installed frameworks");
    describeTask(app, "test", "Runs all testcases at " + path.resolve("Test"));

    colorPrint("--------------------------------------------------------------------------", "bold+green");
});

CLEAN.include(buildPath);
CLOBBER.include(path.join(buildDir, "Debug", productName))
    .include(path.join(buildDir, "Release", productName))
    .include(debugPackagePath)
    .include(releasePackagePath)

const install = function(action)
{
    ["Release", "Debug"].forEach(function(aConfig)
    {
        colorPrint((action === "symlink" ? "Symlinking " : "Copying ") + aConfig + "...", "cyan");

        const thePackageFrameworksPath = aConfig === "Debug" ? path.join(packageFrameworksPath, aConfig) : packageFrameworksPath;

        if (fs.existsSync(thePackageFrameworksPath) && !fs.lstatSync(thePackageFrameworksPath).isDirectory())
            childProcess.execSync(["mkdir", "-p", thePackageFrameworksPath].map(utilsFile.enquote).join(" "));
        
        var buildPath = path.resolve(path.join(buildDir, aConfig, productName)),
            targetPath = path.join(thePackageFrameworksPath, productName);

        if (action === "symlink")
            directoryOp(["ln", "-sf", buildPath, targetPath]);
        else
            utilsFile.cp_r(buildPath, targetPath);
    });
};

const directoryOp = function(cmd)
{
    var targetPath = cmd[cmd.length - 1];

    if (fs.existsSync(targetPath) && fs.lstatSync(targetPath).isDirectory())
        childProcess.execSync(["rm", "-rf", targetPath].map(utilsFile.enquote).join(" "));

    childProcess.execSync(cmd.map(utilsFile.enquote).join(" "));
};

const describeTask = function(application, task, description)
{
    colorPrint("\n" + application + " " + task, "violet");
    description.split("\n").forEach(function(line)
    {
        stream.print("   " + line);
    });
};

const colorPrint = function(message, color)
{
    var matches = color.match(/(bold(?: |\+))?(.+)/);

    if (!matches)
        return;

    message = "\0" + matches[2] + "(" + message + "\0)";

    if (matches[1])
        message = "\0bold(" + message + "\0)";

    stream.print(message);
};
