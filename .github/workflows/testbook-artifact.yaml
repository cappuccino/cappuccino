name: Build Testbook Artifact with Fresh Frameworks

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build-artifact:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cappuccino (this repo)
        uses: actions/checkout@v5

      - name: Checkout Cappuccino-Testbook
        uses: actions/checkout@v5
        with:
          repository: ArgosOz/Cappuccino-Testbook
          path: testbook

      - name: Use Node.js
        uses: actions/setup-node@v4

      - name: Verify directories exist
        run: |
          ls -la
          echo "---- testbook root ----" && ls -la testbook || true
          echo "---- dist ----" && ls -la dist || true

      - name: Ensure dist exists
        run: |
          if [ ! -d "dist" ]; then
            echo "❌ dist/ directory not found at repo root." >&2
            exit 1
          fi

      - run: echo "${PWD}/dist/cappuccino/bin" >> $GITHUB_PATH
      - run: echo "${PWD}/dist/objective-j/bin" >> $GITHUB_PATH
      - run: npm install
      - run: npm update
      - run: jake dist
      - run: jake test-only
    
      - name: Prepare Frameworks directory in Testbook
        run: |
          mkdir -p testbook/Frameworks
          rm -rf testbook/Frameworks/*

      - name: Copy fresh frameworks from dist into Testbook/Frameworks
        run: |
          # Copy everything from dist into the Frameworks folder
          # -a preserves attributes
          cp -a dist/cappuccino/Frameworks/{Foundation,AppKit} testbook/Frameworks/
          cp -a dist/objective-j/Frameworks/Objective-J testbook/Frameworks/
          echo "Framework folder now contains:"
          ls -la testbook/Frameworks

      - name: Generate manifest of manual test directories
        if: ${{ hashFiles('Tests/Manual/**') != '' }}
        run: |
          set -euo pipefail
          mkdir -p artifacts
          OUT="testbook/Resources/recipes.txt"
          : > "$OUT"

          if [ ! -d "Tests/Manual" ]; then
            echo "❌ Tests/Manual not found at repo root." >&2
            exit 1
          fi

          # Iterate over immediate subdirectories of Tests/Manual (null-safe for spaces)
          while IFS= read -r -d '' d; do
            name=$(basename "$d")
            ts=$(date +%s%3N)  # milliseconds since epoch
            printf '%s|%s|\n' "$ts" "$name" >> "$OUT"
            # Optional tiny sleep to help keep timestamps distinct:
            sleep 0.01
          done < <(find "Tests/Manual" -mindepth 1 -maxdepth 1 -type d -print0 | sort -z)

          echo "Wrote $OUT:"
          cat "$OUT"

      - name: Clear directories in testbook/Resources (keep files)
        run: |
          set -euo pipefail
          mkdir -p testbook/Resources
          # Remove only immediate subdirectories (handles spaces safely)
          find testbook/Resources -mindepth 1 -maxdepth 1 -type d -print0 \
            | xargs -0 -r rm -rf
          echo "Remaining files in testbook/Resources (if any):"
          find testbook/Resources -mindepth 1 -maxdepth 1 ! -type d -ls || true

      - name: Copy all directories from Tests/Manual to testbook/Resources
        run: |
          set -euo pipefail
          if [ ! -d "Tests/Manual" ]; then
            echo "❌ Tests/Manual not found at repo root." >&2
            exit 1
          fi
          # Copy each immediate subdirectory from Tests/Manual
          while IFS= read -r -d '' d; do
            cp -a "$d" testbook/Resources/
          done < <(find Tests/Manual -mindepth 1 -maxdepth 1 -type d -print0)

          echo "Contents of testbook/Resources after copy:"
          ls -la testbook/Resources

      - name: Update Index.html files under testbook/Resources/*/
        run: |
          set -euo pipefail
          BASE="testbook/Resources"
          if [ ! -d "$BASE" ]; then
            echo "❌ $BASE does not exist." >&2
            exit 1
          fi

          found=0
          while IFS= read -r -d '' file; do
            found=1
            if grep -q 'OBJJ_INCLUDE_PATHS' "$file"; then
              echo "Already updated: $file"
              continue
            fi
            perl -0777 -i -pe 's/OBJJ_MAIN_FILE\s*=\s*"main\.j";/OBJJ_INCLUDE_PATHS = ["..\/..\/Frameworks"];\nOBJJ_MAIN_FILE = "main.j";/' "$file"
            perl -0777 -i -pe 's/Frameworks\/Objective-J\/Objective-J.js/\.\.\/\.\.\/Frameworks\/Objective-J\/Objective-J.js/' "$file"
            echo "Updated: $file"
          done < <(find "$BASE" -mindepth 2 -maxdepth 2 -type f -iname "index.html" -print0)

          if [ "$found" -eq 0 ]; then
            echo "⚠️ No index.html files found under $BASE/*/"
          fi

      - name: Package modified Testbook as zip
        run: |
          zip -r testbook-artifact.zip testbook

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Cappuccino-Testbook-with-new-frameworks
          path: testbook-artifact.zip
          if-no-files-found: error
